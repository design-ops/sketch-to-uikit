//
//  Stylist+textStyles.swift
//
//  WARNING THIS FILE IS GENERATED *DO NOT* EDIT
//

// swiftlint:disable all

import UIKit
import StylableUIKit

extension Stylist {

    public func textStyle(_ style: StylistTextStyle, element: StylistElement? = nil, section: StylistSection? = nil) -> TextStyle {
        let atom = style.name

{{#grouped}}
        // first section / element / atom{{#has_section_element_atom}}
        if let sectionName = section?.name, let elementName = element?.name {
{{#section_element_atom}}

            if atom == "{{atom}}" && elementName == "{{element}}" && sectionName == "{{section}}" {
{{> text_style}}
            }{{/section_element_atom}}
        }
{{/has_section_element_atom}}{{^has_section_element_atom}}// (not present){{/has_section_element_atom}}
        //
        // then element / atom (aka * / element / atom){{#has_element_atom}}
        if let elementName = element?.name {
{{#element_atom}}

            if atom == "{{atom}}" && elementName == "{{element}}" {
{{> text_style}}
            }{{/element_atom}}
        }
{{/has_element_atom}}{{^has_element_atom}}// (not present){{/has_element_atom}}
        //
        // then section / * / atom{{#has_section_atom}}
        if let sectionName = section?.name {
{{#section_atom}}

            if atom == "{{atom}}" && sectionName == "{{section}}" {
{{> text_style}}
            }{{/section_atom}}
        }
{{/has_section_atom}}{{^has_section_atom}}// (not present){{/has_section_atom}}
        //
        // finally just atom
{{#atom}}

        if atom == "{{atom}}" {
{{> text_style}}
        }
{{/atom}}
{{/grouped}}
        print("[Stylist:textStyle] failed to find asset for \(atom) for element '\(element?.name ?? "nil")' in section '\(section?.name ?? "nil")'")

        // return a very visually obvious default...
        return TextStyle(font: fontOrDefault(name: "Papyrus", size: 12), textColor: .cyan)

    }

}

fileprivate func basicFrom(name: String, size: CGFloat, textColor: UIColor, lineSpacing: CGFloat, letterSpacing: CGFloat,
                                textAlignment: NSTextAlignment, textTransform: TextTransform = .none,
                                variantType: StylistVariant = UIControl.State.normal) -> BasicTextStyle {
    let font = fontOrDefault(name: name, size: size)
    let actualLineSpacing: CGFloat = {
        if lineSpacing > 0 {
            return lineSpacing - font.lineHeight
        }
        return lineSpacing
    }()

    return BasicTextStyle(font: font, textColor: textColor, lineSpacing: actualLineSpacing, letterSpacing: letterSpacing,
                          textAlignment: textAlignment, textTransform: textTransform, variantType: variantType)
}

fileprivate func styleFrom(name: String, size: CGFloat, textColor: UIColor, lineSpacing: CGFloat, letterSpacing: CGFloat,
                            textAlignment: NSTextAlignment, textTransform: TextTransform = .none,
                            variantType: StylistVariant = UIControl.State.normal, variants: [BasicTextStyle]) -> TextStyle {
    let font = fontOrDefault(name: name, size: size)
    let actualLineSpacing: CGFloat = {
        if lineSpacing > 0 {
            return lineSpacing - font.lineHeight
        }
        return lineSpacing
    }()

    return TextStyle(font: font, textColor: textColor, lineSpacing: actualLineSpacing, letterSpacing: letterSpacing,
                     textAlignment: textAlignment, textTransform: textTransform, variantType: variantType, variants: variants)
}



fileprivate func fontOrDefault(name: String, size: CGFloat) -> UIFont {
    guard let font = UIFont(name: name, size: size) else {
        print("ðŸš¨ðŸš¨ Font requested, but missing '\(name)'")
        return UIFont(name: "Papyrus", size: size)!
    }
    return font
}
